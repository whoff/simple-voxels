#summary Raynal and Couprie isthmus-based 6-subiteration thinning
*Contents*
<wiki:toc max_depth="2" />

= Introduction =
When the [PalagyiKuba#Matching_Templates deletable conditions] proposed by Palagyi and Kuba is used for thinning implementation,
one finds that numerous spurious branches are generated
along with object skeletons.
This is especially the case with higher object resolution such as 512x512x1024, which is however typical with, for example, recent medical imaging applications.
The spurious branches are generated partly due to the skeleton preserving nature of the deletable conditions or the matching templates,
which are designed to keep end points of curvilinear structures.

In order to address this issue, Raynal and Couprie proposed an isthmus based 6-subiteration thinning algorithm.
In [Top#References [2]], the authors:
  # loosened Palagyi and Kuba's deletable conditions to further remove end points
  # instead prohibited removal of _isthmus_ points
The isthmus points were defined as the points that satisfy:
  * The number of 26-adjacent foreground components >= 2
The isthmus points are therefore the points that connect multiple foreground components. For example, the points on a curve line are all isthmus points except the two end points.

It is expected that the spurious branches will be reduced by the removal of end points while the skeletal branches will remain by preserving isthmus points.

= Project Proposal =
As for the implementation of the isthmus point detection,
the authors used "look-up table in order to use pre-computation,
for each possible configuration of 26-neighborhood" (Section 4 [2]).

In order to allow more memory efficient implementation,
I tried to find a set of matching templates for the isthmus points.
In the [RaynalCouprie#Matching_Templates_for_Isthmus_Points latter] of this page,
I will propose a set of six matching templates for the isthmus detection.

= Matching Templates for Deletable Points =
In [Top#References [2]], the authors proposed a variant of Palagyi and Kuba's matching templates to additionally remove end points.

The following is their base templates for the U direction
translated into [Notations#Template_Mask Mask] structure.
{{{
namespace NRaynal {

    const Mask Templates[7] = {
        Mask( BV( BP(7,7,7), BP(0,2,0), BP(0,2,0) ), BV( BP(0,0,0), BP(0,2,0), BP(0,2,0) ) ),   // M1'
        Mask( BV( BP(0,7,7), BP(2,2,0), BP(0,2,0) ), BV( BP(0,0,0), BP(2,2,0), BP(0,2,0) ) ),   // M2'
        Mask( BV( BP(0,3,3), BP(2,6,0), BP(0,2,0) ), BV( BP(0,0,0), BP(2,6,0), BP(0,2,0) ) ),   // M3'
        Mask( BV( BP(7,7,7), BP(4,2,0), BP(0,2,0) ), BV( BP(4,0,0), BP(4,2,0), BP(0,2,0) ) ),   // M4'
        Mask( BV( BP(7,7,7), BP(0,2,7), BP(2,2,7) ), BV( BP(0,0,0), BP(0,2,0), BP(2,0,0) ) ),   // M5'
        Mask( BV( BP(7,7,7), BP(0,3,3), BP(2,7,3) ), BV( BP(0,0,0), BP(0,2,0), BP(2,4,0) ) ),   // M6'
        Mask( BV( BP(7,7,7), BP(7,7,7), BP(7,7,7) ), BV( BP(0,0,0), BP(0,2,0), BP(0,0,1) ) ),   // M7'
    };
}
}}}

Compared with [PalagyiKuba#Matching_Templates],
  * M1 is loosened to M1' to include 6-adjacent end points.
  * M5 is loosened to M5' to include 18-adjacent end points.
  * M7' is added for 26-adjacent end points.
  * Other templates are same.

Here is the console dump of the above templates:

[http://simple-voxels.googlecode.com/svn/wiki/images/raynal-templates.png]

== Implementation ==
By enumerating all the symmetric configurations of each template within the NSWE plane (there are eight of them) and removing redundant ones,
one can obtain the [http://code.google.com/p/simple-voxels/source/browse/trunk/Raynal_table.h list]
of matching templates for the U direction:
{{{
const Mask raynal_tables[][25] = {
    {// dir = 0
        // M1
        Mask( BV( BP(7,7,7), BP(0,2,0), BP(0,2,0) ), BV( BP(0,0,0), BP(0,2,0), BP(0,2,0) ) ),
        // M2
        Mask( BV( BP(0,7,7), BP(2,2,0), BP(0,2,0) ), BV( BP(0,0,0), BP(2,2,0), BP(0,2,0) ) ),
        Mask( BV( BP(3,3,3), BP(0,6,0), BP(0,2,0) ), BV( BP(0,0,0), BP(0,6,0), BP(0,2,0) ) ),
        Mask( BV( BP(7,7,0), BP(0,2,2), BP(0,2,0) ), BV( BP(0,0,0), BP(0,2,2), BP(0,2,0) ) ),
        Mask( BV( BP(6,6,6), BP(0,3,0), BP(0,2,0) ), BV( BP(0,0,0), BP(0,3,0), BP(0,2,0) ) ),
        // M3
        Mask( BV( BP(0,3,3), BP(2,6,0), BP(0,2,0) ), BV( BP(0,0,0), BP(2,6,0), BP(0,2,0) ) ),
        Mask( BV( BP(0,6,6), BP(2,3,0), BP(0,2,0) ), BV( BP(0,0,0), BP(2,3,0), BP(0,2,0) ) ),
        Mask( BV( BP(3,3,0), BP(0,6,2), BP(0,2,0) ), BV( BP(0,0,0), BP(0,6,2), BP(0,2,0) ) ),
        Mask( BV( BP(6,6,0), BP(0,3,2), BP(0,2,0) ), BV( BP(0,0,0), BP(0,3,2), BP(0,2,0) ) ),
        // M4
        Mask( BV( BP(7,7,7), BP(4,2,0), BP(0,2,0) ), BV( BP(4,0,0), BP(4,2,0), BP(0,2,0) ) ),
        Mask( BV( BP(7,7,7), BP(1,2,0), BP(0,2,0) ), BV( BP(1,0,0), BP(1,2,0), BP(0,2,0) ) ),
        Mask( BV( BP(7,7,7), BP(0,2,4), BP(0,2,0) ), BV( BP(0,0,4), BP(0,2,4), BP(0,2,0) ) ),
        Mask( BV( BP(7,7,7), BP(0,2,1), BP(0,2,0) ), BV( BP(0,0,1), BP(0,2,1), BP(0,2,0) ) ),
        // M5
        Mask( BV( BP(7,7,7), BP(0,2,7), BP(2,2,7) ), BV( BP(0,0,0), BP(0,2,0), BP(2,0,0) ) ),
        Mask( BV( BP(7,7,7), BP(1,3,1), BP(1,7,1) ), BV( BP(0,0,0), BP(0,2,0), BP(0,4,0) ) ),
        Mask( BV( BP(7,7,7), BP(7,2,0), BP(7,2,2) ), BV( BP(0,0,0), BP(0,2,0), BP(0,0,2) ) ),
        Mask( BV( BP(7,7,7), BP(4,6,4), BP(4,7,4) ), BV( BP(0,0,0), BP(0,2,0), BP(0,1,0) ) ),
        // M6
        Mask( BV( BP(7,7,7), BP(0,3,3), BP(2,7,3) ), BV( BP(0,0,0), BP(0,2,0), BP(2,4,0) ) ),
        Mask( BV( BP(7,7,7), BP(0,6,6), BP(2,7,6) ), BV( BP(0,0,0), BP(0,2,0), BP(2,1,0) ) ),
        Mask( BV( BP(7,7,7), BP(3,3,0), BP(3,7,2) ), BV( BP(0,0,0), BP(0,2,0), BP(0,4,2) ) ),
        Mask( BV( BP(7,7,7), BP(6,6,0), BP(6,7,2) ), BV( BP(0,0,0), BP(0,2,0), BP(0,1,2) ) ),
        // M7
        Mask( BV( BP(7,7,7), BP(7,7,7), BP(7,7,7) ), BV( BP(0,0,0), BP(0,2,0), BP(0,0,1) ) ),
        Mask( BV( BP(7,7,7), BP(7,7,7), BP(7,7,7) ), BV( BP(0,0,0), BP(0,2,0), BP(0,0,4) ) ),
        Mask( BV( BP(7,7,7), BP(7,7,7), BP(7,7,7) ), BV( BP(0,0,0), BP(0,2,0), BP(1,0,0) ) ),
        Mask( BV( BP(7,7,7), BP(7,7,7), BP(7,7,7) ), BV( BP(0,0,0), BP(0,2,0), BP(4,0,0) ) ),
    },
    {// dir = 1
        // M1
        Mask( BV( BP(0,2,0), BP(0,2,0), BP(7,7,7) ), BV( BP(0,2,0), BP(0,2,0), BP(0,0,0) ) ),
        // M2
        Mask( BV( BP(0,2,0), BP(0,2,2), BP(7,7,0) ), BV( BP(0,2,0), BP(0,2,2), BP(0,0,0) ) ),
        Mask( BV( BP(0,2,0), BP(0,6,0), BP(3,3,3) ), BV( BP(0,2,0), BP(0,6,0), BP(0,0,0) ) ),
        Mask( BV( BP(0,2,0), BP(2,2,0), BP(0,7,7) ), BV( BP(0,2,0), BP(2,2,0), BP(0,0,0) ) ),
        Mask( BV( BP(0,2,0), BP(0,3,0), BP(6,6,6) ), BV( BP(0,2,0), BP(0,3,0), BP(0,0,0) ) ),
//...
}
}}}

By using this list, one can check if a voxel is deletable by
{{{
namespace NPalagyi {
    bool IsDeletable( int bits, EFaceDir dir ) {
        for each (const Mask& mask in palagyi_tables[(int)dir]) {
            if (mask.Match( bits )) {
                return true;
            }
        }
        return false;
    }
}
}}}
This function is defined in [http://code.google.com/p/simple-voxels/source/browse/trunk/Isthmus.cpp Isthmus.cpp].

== Statistics ==
The table below shows how many simple configurations can be deleted by the above templates for each of the six directions:

[http://simple-voxels.googlecode.com/svn/wiki/images/raynal-stat.png]

where bit0 - bit5 denotes the following directions:
|| *Bit* || *Direction* ||
|| bit0 || U ||
|| bit1 || D ||
|| bit2 || N ||
|| bit3 || S ||
|| bit4 || W ||
|| bit5 || E ||

Compared with [PalagyiKuba#Statistics],
  * For each direction, 2,124,292 - 2,124,283 = 9 configurations are further removed.
  * As a whole, 9,916,952 - 9,916,926 = 26 configurations are further removed.
These numbers clearly coincide with the number of end point configurations.

In the console dump below, the configurations that are removable by Raynal and Couprie's but not by Palagyi and Kuba's are dumped for the U direction.
It is confirmed that they are all end points.

[http://simple-voxels.googlecode.com/svn/wiki/images/raynal-palagyi.png]

= Matching Templates for Isthmus Points =
Now, let us catch the isthmus points next.

== Definition ==
The isthmus points are defined in [Top#References [2]] as those points that satisfy:
  * The number of 26-adjacent foreground components >= 2 
According to [SimpleVoxels#Verification components count table],
the number of voxels that satisfy this condition is

|| *Components Count* || *Number* ||
|| (2,1) || 3,626,396 ||
|| (3,1) || 651,784 ||
|| (4,1) || 106,054 ||
|| (5,1) || 13,512 ||
|| (6,1) || 1,180 ||
|| (7,1) || 56 ||
|| (8,1) || 1 ||
|| (2,2) || 904,832 ||
|| (3,2) || 49,216 ||
|| (4,2) || 2,688 ||
|| (5,2) || 96 ||
|| (2,3) || 63,744 ||
|| (3,3) || 768 ||
|| (2,4) || 1,024 ||
|| *total* || *5,421,351* ||

== Proposed Templates ==
In order to detect isthmus points, one can use a look-up truth table
for possible 2^26 = 67,108,864 configurations assuming that the center voxel is a black point.
If a true/false value for one configurations is represented by one bit,
it amounts to a memory space of 8MB.
This table size may be practical enough to be loaded onto a certain level of cached memory and randomly accessed in modern high-end computers.
Nevertheless, I was curious about matching templates for isthmus points because it would visualize how the isthmus points look like and could lead to more efficient implementations.



[http://simple-voxels.googlecode.com/svn/wiki/images/isthmus-masks.png]

== Implementation ==

{{{
namespace NIsthmus {

    const Mask Templates[6] = {
        Mask( BV( BP(0,0,0), BP(7,5,7), BP(0,0,0) ), 0, BV( BP(7,7,7), BP(0,0,0), BP(0,0,0) ), BV( BP(0,0,0), BP(0,0,0), BP(7,7,7) ) ),
        Mask( BV( BP(0,7,0), BP(7,5,0), BP(0,0,0) ), 0, BV( BP(7,0,0), BP(0,0,0), BP(0,0,0) ), BV( BP(0,0,7), BP(0,0,7), BP(7,7,7) ) ),
        Mask( BV( BP(2,6,0), BP(6,4,0), BP(0,0,0) ), 0, BV( BP(4,0,0), BP(0,0,0), BP(0,0,0) ), BV( BP(1,1,7), BP(1,1,7), BP(7,7,7) ) ),
        Mask( BV( BP(2,6,0), BP(3,5,7), BP(0,0,0) ), 0, BV( BP(4,0,0), BP(4,0,0), BP(7,7,7) ), BV( BP(1,1,7), BP(0,0,0), BP(0,0,0) ) ),
        Mask( BV( BP(2,6,0), BP(3,5,6), BP(0,3,2) ), 0, BV( BP(4,0,0), BP(4,0,0), BP(7,4,4) ), BV( BP(1,1,7), BP(0,0,1), BP(0,0,1) ) ),
        Mask( BV( BP(2,6,0), BP(2,5,7), BP(2,3,0) ), 0, BV( BP(4,0,0), BP(4,0,0), BP(4,4,7) ), BV( BP(1,1,7), BP(1,0,0), BP(1,0,0) ) ),
    };
}
}}}


[http://simple-voxels.googlecode.com/svn/wiki/images/isthmus-templates.png]

[http://simple-voxels.googlecode.com/svn/wiki/images/isthmus-stat.png]